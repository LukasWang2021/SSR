/* Automatically generated nanopb constant definitions */
/* Generated by nanopb-0.3.7-dev at Thu Jul 19 17:03:57 2018. */

#include "test.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif



const pb_field_t comm_RequestHeader_fields[2] = {
    PB_FIELD(  1, UINT64  , REQUIRED, STATIC  , FIRST, comm_RequestHeader, time_stamp, time_stamp, 0),
    PB_LAST_FIELD
};

const pb_field_t comm_ResponseHeader_fields[4] = {
    PB_FIELD(  1, UINT64  , REQUIRED, STATIC  , FIRST, comm_ResponseHeader, time_stamp, time_stamp, 0),
    PB_FIELD(  2, BOOL    , REQUIRED, STATIC  , OTHER, comm_ResponseHeader, succeed, time_stamp, 0),
    PB_FIELD(  3, INT32   , REQUIRED, STATIC  , OTHER, comm_ResponseHeader, package_left, succeed, 0),
    PB_LAST_FIELD
};

const pb_field_t comm_Property_fields[2] = {
    PB_FIELD(  1, UENUM   , REQUIRED, STATIC  , FIRST, comm_Property, authority, authority, 0),
    PB_LAST_FIELD
};

const pb_field_t comm_MessageTypeBool_fields[2] = {
    PB_FIELD(  1, BOOL    , REQUIRED, STATIC  , FIRST, comm_MessageTypeBool, data, data, 0),
    PB_LAST_FIELD
};

const pb_field_t comm_MessageTypeInt32_fields[2] = {
    PB_FIELD(  1, INT32   , REQUIRED, STATIC  , FIRST, comm_MessageTypeInt32, data, data, 0),
    PB_LAST_FIELD
};

const pb_field_t comm_RequestMessageTypeInt32_fields[4] = {
    PB_FIELD(  1, MESSAGE , REQUIRED, STATIC  , FIRST, comm_RequestMessageTypeInt32, header, header, &comm_RequestHeader_fields),
    PB_FIELD(  2, MESSAGE , REQUIRED, STATIC  , OTHER, comm_RequestMessageTypeInt32, property, header, &comm_Property_fields),
    PB_FIELD(  3, MESSAGE , REQUIRED, STATIC  , OTHER, comm_RequestMessageTypeInt32, data, property, &comm_MessageTypeInt32_fields),
    PB_LAST_FIELD
};

const pb_field_t comm_RequestMessageTypeVoid_fields[3] = {
    PB_FIELD(  1, MESSAGE , REQUIRED, STATIC  , FIRST, comm_RequestMessageTypeVoid, header, header, &comm_RequestHeader_fields),
    PB_FIELD(  2, MESSAGE , REQUIRED, STATIC  , OTHER, comm_RequestMessageTypeVoid, property, header, &comm_Property_fields),
    PB_LAST_FIELD
};

const pb_field_t comm_ResponseMessageTypeInt32_fields[4] = {
    PB_FIELD(  1, MESSAGE , REQUIRED, STATIC  , FIRST, comm_ResponseMessageTypeInt32, header, header, &comm_ResponseHeader_fields),
    PB_FIELD(  2, MESSAGE , REQUIRED, STATIC  , OTHER, comm_ResponseMessageTypeInt32, property, header, &comm_Property_fields),
    PB_FIELD(  3, MESSAGE , REQUIRED, STATIC  , OTHER, comm_ResponseMessageTypeInt32, data, property, &comm_MessageTypeInt32_fields),
    PB_LAST_FIELD
};

const pb_field_t comm_PublishElement_fields[3] = {
    PB_FIELD(  1, INT32   , REQUIRED, STATIC  , FIRST, comm_PublishElement, hash, hash, 0),
    PB_FIELD(  2, BYTES   , REQUIRED, STATIC  , OTHER, comm_PublishElement, data, hash, 0),
    PB_LAST_FIELD
};

const pb_field_t comm_Publish_fields[3] = {
    PB_FIELD(  1, UINT64  , REQUIRED, STATIC  , FIRST, comm_Publish, time_stamp, time_stamp, 0),
    PB_FIELD(  2, MESSAGE , REPEATED, STATIC  , OTHER, comm_Publish, element, time_stamp, &comm_PublishElement_fields),
    PB_LAST_FIELD
};

const pb_field_t comm_MessageTypeAddPublish_fields[5] = {
    PB_FIELD(  1, INT32   , REQUIRED, STATIC  , FIRST, comm_MessageTypeAddPublish, topic_hash, topic_hash, 0),
    PB_FIELD(  2, INT32   , REQUIRED, STATIC  , OTHER, comm_MessageTypeAddPublish, time_min, topic_hash, 0),
    PB_FIELD(  3, INT32   , REQUIRED, STATIC  , OTHER, comm_MessageTypeAddPublish, time_max, time_min, 0),
    PB_FIELD(  4, INT32   , REPEATED, STATIC  , OTHER, comm_MessageTypeAddPublish, element_hash_list, time_max, 0),
    PB_LAST_FIELD
};

const pb_field_t comm_MessageTypeDeletePublish_fields[2] = {
    PB_FIELD(  1, INT32   , REQUIRED, STATIC  , FIRST, comm_MessageTypeDeletePublish, topic_hash, topic_hash, 0),
    PB_LAST_FIELD
};

const pb_field_t comm_RequestAddPublish_fields[4] = {
    PB_FIELD(  1, MESSAGE , REQUIRED, STATIC  , FIRST, comm_RequestAddPublish, header, header, &comm_RequestHeader_fields),
    PB_FIELD(  2, MESSAGE , REQUIRED, STATIC  , OTHER, comm_RequestAddPublish, property, header, &comm_Property_fields),
    PB_FIELD(  3, MESSAGE , REQUIRED, STATIC  , OTHER, comm_RequestAddPublish, data, property, &comm_MessageTypeAddPublish_fields),
    PB_LAST_FIELD
};

const pb_field_t comm_RequestDeletePublish_fields[4] = {
    PB_FIELD(  1, MESSAGE , REQUIRED, STATIC  , FIRST, comm_RequestDeletePublish, header, header, &comm_RequestHeader_fields),
    PB_FIELD(  2, MESSAGE , REQUIRED, STATIC  , OTHER, comm_RequestDeletePublish, property, header, &comm_Property_fields),
    PB_FIELD(  3, MESSAGE , REQUIRED, STATIC  , OTHER, comm_RequestDeletePublish, data, property, &comm_MessageTypeDeletePublish_fields),
    PB_LAST_FIELD
};

const pb_field_t comm_ResponseBool_fields[4] = {
    PB_FIELD(  1, MESSAGE , REQUIRED, STATIC  , FIRST, comm_ResponseBool, header, header, &comm_ResponseHeader_fields),
    PB_FIELD(  2, MESSAGE , REQUIRED, STATIC  , OTHER, comm_ResponseBool, property, header, &comm_Property_fields),
    PB_FIELD(  3, MESSAGE , REQUIRED, STATIC  , OTHER, comm_ResponseBool, data, property, &comm_MessageTypeBool_fields),
    PB_LAST_FIELD
};

const pb_field_t comm_PoseEuler_fields[7] = {
    PB_FIELD(  1, DOUBLE  , REQUIRED, STATIC  , FIRST, comm_PoseEuler, x, x, 0),
    PB_FIELD(  2, DOUBLE  , REQUIRED, STATIC  , OTHER, comm_PoseEuler, y, x, 0),
    PB_FIELD(  3, DOUBLE  , REQUIRED, STATIC  , OTHER, comm_PoseEuler, z, y, 0),
    PB_FIELD(  4, DOUBLE  , REQUIRED, STATIC  , OTHER, comm_PoseEuler, a, z, 0),
    PB_FIELD(  5, DOUBLE  , REQUIRED, STATIC  , OTHER, comm_PoseEuler, b, a, 0),
    PB_FIELD(  6, DOUBLE  , REQUIRED, STATIC  , OTHER, comm_PoseEuler, c, b, 0),
    PB_LAST_FIELD
};

const pb_field_t comm_MessageTypeFrame_fields[5] = {
    PB_FIELD(  1, INT32   , REQUIRED, STATIC  , FIRST, comm_MessageTypeFrame, id, id, 0),
    PB_FIELD(  2, STRING  , REQUIRED, STATIC  , OTHER, comm_MessageTypeFrame, comment, id, 0),
    PB_FIELD(  3, MESSAGE , REQUIRED, STATIC  , OTHER, comm_MessageTypeFrame, pose_euler, comment, &comm_PoseEuler_fields),
    PB_FIELD(  4, BOOL    , OPTIONAL, STATIC  , OTHER, comm_MessageTypeFrame, is_valid, pose_euler, 0),
    PB_LAST_FIELD
};

const pb_field_t comm_RequestMessageTypeFrame_fields[4] = {
    PB_FIELD(  1, MESSAGE , REQUIRED, STATIC  , FIRST, comm_RequestMessageTypeFrame, header, header, &comm_RequestHeader_fields),
    PB_FIELD(  2, MESSAGE , REQUIRED, STATIC  , OTHER, comm_RequestMessageTypeFrame, property, header, &comm_Property_fields),
    PB_FIELD(  3, MESSAGE , REQUIRED, STATIC  , OTHER, comm_RequestMessageTypeFrame, data, property, &comm_MessageTypeFrame_fields),
    PB_LAST_FIELD
};


/* Check that field information fits in pb_field_t */
#if !defined(PB_FIELD_32BIT)
/* If you get an error here, it means that you need to define PB_FIELD_32BIT
 * compile-time option. You can do that in pb.h or on compiler command line.
 * 
 * The reason you need to do this is that some of your messages contain tag
 * numbers or field sizes that are larger than what can fit in 8 or 16 bit
 * field descriptors.
 */
PB_STATIC_ASSERT((pb_membersize(comm_RequestMessageTypeInt32, header) < 65536 && pb_membersize(comm_RequestMessageTypeInt32, property) < 65536 && pb_membersize(comm_RequestMessageTypeInt32, data) < 65536 && pb_membersize(comm_RequestMessageTypeVoid, header) < 65536 && pb_membersize(comm_RequestMessageTypeVoid, property) < 65536 && pb_membersize(comm_ResponseMessageTypeInt32, header) < 65536 && pb_membersize(comm_ResponseMessageTypeInt32, property) < 65536 && pb_membersize(comm_ResponseMessageTypeInt32, data) < 65536 && pb_membersize(comm_Publish, element[0]) < 65536 && pb_membersize(comm_RequestAddPublish, header) < 65536 && pb_membersize(comm_RequestAddPublish, property) < 65536 && pb_membersize(comm_RequestAddPublish, data) < 65536 && pb_membersize(comm_RequestDeletePublish, header) < 65536 && pb_membersize(comm_RequestDeletePublish, property) < 65536 && pb_membersize(comm_RequestDeletePublish, data) < 65536 && pb_membersize(comm_ResponseBool, header) < 65536 && pb_membersize(comm_ResponseBool, property) < 65536 && pb_membersize(comm_ResponseBool, data) < 65536 && pb_membersize(comm_MessageTypeFrame, pose_euler) < 65536 && pb_membersize(comm_RequestMessageTypeFrame, header) < 65536 && pb_membersize(comm_RequestMessageTypeFrame, property) < 65536 && pb_membersize(comm_RequestMessageTypeFrame, data) < 65536), YOU_MUST_DEFINE_PB_FIELD_32BIT_FOR_MESSAGES_comm_RequestHeader_comm_ResponseHeader_comm_Property_comm_MessageTypeBool_comm_MessageTypeInt32_comm_RequestMessageTypeInt32_comm_RequestMessageTypeVoid_comm_ResponseMessageTypeInt32_comm_PublishElement_comm_Publish_comm_MessageTypeAddPublish_comm_MessageTypeDeletePublish_comm_RequestAddPublish_comm_RequestDeletePublish_comm_ResponseBool_comm_PoseEuler_comm_MessageTypeFrame_comm_RequestMessageTypeFrame)
#endif

#if !defined(PB_FIELD_16BIT) && !defined(PB_FIELD_32BIT)
#error Field descriptor for comm_PublishElement.data is too large. Define PB_FIELD_16BIT to fix this.
#endif


/* On some platforms (such as AVR), double is really float.
 * These are not directly supported by nanopb, but see example_avr_double.
 * To get rid of this error, remove any double fields from your .proto.
 */
PB_STATIC_ASSERT(sizeof(double) == 8, DOUBLE_MUST_BE_8_BYTES)

/* @@protoc_insertion_point(eof) */
