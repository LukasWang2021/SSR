/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.7 at Sun Sep 29 18:11:44 2019. */

#ifndef PB_COMM_COMM_PB_H_INCLUDED
#define PB_COMM_COMM_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _Comm_Authority {
    Comm_Authority_TP = 0,
    Comm_Authority_TP_SIMMULATOR = 1,
    Comm_Authority_ADMINISTRATOR = 2
} Comm_Authority;
#define _Comm_Authority_MIN Comm_Authority_TP
#define _Comm_Authority_MAX Comm_Authority_ADMINISTRATOR
#define _Comm_Authority_ARRAYSIZE ((Comm_Authority)(Comm_Authority_ADMINISTRATOR+1))

/* Struct definitions */
typedef struct _Comm_Property {
    Comm_Authority authority;
/* @@protoc_insertion_point(struct:Comm_Property) */
} Comm_Property;

/* Default values for struct fields */

/* Initializer values for message structs */
#define Comm_Property_init_default               {(Comm_Authority)0}
#define Comm_Property_init_zero                  {(Comm_Authority)0}

/* Field tags (for use in manual encoding/decoding) */
#define Comm_Property_authority_tag              1

/* Struct field encoding specification for nanopb */
extern const pb_field_t Comm_Property_fields[2];

/* Maximum encoded size of messages (where known) */
#define Comm_Property_size                       2

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define COMM_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
