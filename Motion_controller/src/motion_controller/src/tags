!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ArmGroup	lib_controller.cpp	/^fst_controller::ArmGroup::ArmGroup( const JointValues &joint_values,$/;"	f	class:fst_controller::ArmGroup
Assign3	BasicFunctions.cpp	/^int fst_controller::TrajPlan::Assign3(double u[3], double v[3])$/;"	f	class:fst_controller::TrajPlan
Assign4	BasicFunctions.cpp	/^int fst_controller::TrajPlan::Assign4(double u[4], double v[4])$/;"	f	class:fst_controller::TrajPlan
Cross	BasicFunctions.cpp	/^int fst_controller::TrajPlan::Cross(double u[3], double v[3], double w[3])$/;"	f	class:fst_controller::TrajPlan
DHMatrix	MatTrans.cpp	/^int  fst_controller::TrajPlan::DHMatrix(double L[4], double q, double M[4][4])$/;"	f	class:fst_controller::TrajPlan
Euler2Matrix	MatTrans.cpp	/^int  fst_controller::TrajPlan::Euler2Matrix(double x, double y, double z, double a, double b, double c, double Pose_M[4][4])$/;"	f	class:fst_controller::TrajPlan
ExpQ	QuaternFunctions.cpp	/^int fst_controller::TrajPlan::ExpQ(double L[4], double E[4])$/;"	f	class:fst_controller::TrajPlan
ForwardKinematics	Kinematics.cpp	/^int fst_controller::TrajPlan::ForwardKinematics(const fst_controller::JointValues &joint,fst_controller::Pose &pose)$/;"	f	class:fst_controller::TrajPlan
InnerProduct	BasicFunctions.cpp	/^double fst_controller::TrajPlan::InnerProduct(double u[3], double v[3])$/;"	f	class:fst_controller::TrajPlan
InnerProduct4	QuaternFunctions.cpp	/^double fst_controller::TrajPlan::InnerProduct4(double u[4], double v[4])$/;"	f	class:fst_controller::TrajPlan
InterpQ	QuaternFunctions.cpp	/^int fst_controller::TrajPlan::InterpQ(int n_time, double q_prv[4], double q_0[4], double q_obj[4], double q_nxt[4], double VU[2], vector<fst_controller::Pose> &Quatern_diff)$/;"	f	class:fst_controller::TrajPlan
Interp_singlejoint_t	MoveJ.cpp	/^int fst_controller::TrajPlan::Interp_singlejoint_t(double d, double v0, double v1, double t, double P[4])$/;"	f	class:fst_controller::TrajPlan
InvQ	QuaternFunctions.cpp	/^int fst_controller::TrajPlan::InvQ(double q[4], double iq[4])$/;"	f	class:fst_controller::TrajPlan
InverseKinematics	Kinematics.cpp	/^int fst_controller::TrajPlan::InverseKinematics(const fst_controller::Pose &pose,const fst_controller::JointValues &joint_reference, fst_controller::JointValues &joint_result)$/;"	f	class:fst_controller::TrajPlan
InverseMatrix	MatTrans.cpp	/^bool  fst_controller::TrajPlan::InverseMatrix(double src[N][N], double des[N][N])$/;"	f	class:fst_controller::TrajPlan
JUDGE_AXIS	Kinematics.cpp	/^int fst_controller::TrajPlan::JUDGE_AXIS(double THETA[6])		\/\/判断关节是否超出限位；$/;"	f	class:fst_controller::TrajPlan
LogQ	QuaternFunctions.cpp	/^int fst_controller::TrajPlan::LogQ(double q[4], double l[4])$/;"	f	class:fst_controller::TrajPlan
MATRIX2POSE	QuaternFunctions.cpp	/^int fst_controller::TrajPlan::MATRIX2POSE(double Pose_M[4][4], double PST2[3], double ORT2[4])$/;"	f	class:fst_controller::TrajPlan
MULTIPLY_M	BasicFunctions.cpp	/^int fst_controller::TrajPlan::MULTIPLY_M(double M1[4][4], double M2[4][4], double M[4][4])		\/\/矩阵乘法$/;"	f	class:fst_controller::TrajPlan
MULTIPLY_MV	BasicFunctions.cpp	/^int fst_controller::TrajPlan::MULTIPLY_MV(double M[4][4], double V[4], double U[4])$/;"	f	class:fst_controller::TrajPlan
Matrix2Euler	MatTrans.cpp	/^int  fst_controller::TrajPlan::Matrix2Euler(double R[4][4],double& x, double &y, double &z, double &a, double &b, double &c)$/;"	f	class:fst_controller::TrajPlan
MoveJ	MoveJ.cpp	/^int fst_controller::TrajPlan::MoveJ(	const JointPoint &J0,				\/\/当前位置和速度$/;"	f	class:fst_controller::TrajPlan
MoveJ	lib_controller.cpp	/^bool fst_controller::ArmGroup::MoveJ( const JointValues &joint_target, double v_max, double a_max, int cnt,$/;"	f	class:fst_controller::ArmGroup
MoveJ	lib_controller.cpp	/^bool fst_controller::ArmGroup::MoveJ( const JointValues &joint_target, double v_max, double a_max,$/;"	f	class:fst_controller::ArmGroup
MoveJ	lib_controller.cpp	/^bool fst_controller::ArmGroup::MoveJ(const JointValues &joint_target, double v_max, double a_max, int cnt,$/;"	f	class:fst_controller::ArmGroup
MoveJ2J	lib_controller.cpp	/^bool fst_controller::ArmGroup::MoveJ2J( const JointPoint &jp_start,$/;"	f	class:fst_controller::ArmGroup
MoveJ2J_Cspace	MoveJ.cpp	/^int fst_controller::TrajPlan::MoveJ2J_Cspace(const fst_controller::JointPoint &J0,				\/\/当前位置和速度	$/;"	f	class:fst_controller::TrajPlan
MoveJ2J_Jspace	MoveJ.cpp	/^int fst_controller::TrajPlan::MoveJ2J_Jspace(const fst_controller::JointPoint &J0,				\/\/当前位置和速度	$/;"	f	class:fst_controller::TrajPlan
MoveJ2L	lib_controller.cpp	/^bool fst_controller::ArmGroup::MoveJ2L(	const JointPoint &jp_start, $/;"	f	class:fst_controller::ArmGroup
MoveJ2L_Cspace	MoveJ.cpp	/^int fst_controller::TrajPlan::MoveJ2L_Cspace(const JointPoint &J0,				\/\/当前位置和速度	$/;"	f	class:fst_controller::TrajPlan
MoveJ2L_Jspace	MoveJ.cpp	/^int fst_controller::TrajPlan::MoveJ2L_Jspace(const JointPoint &J0,				\/\/当前位置和速度	$/;"	f	class:fst_controller::TrajPlan
MoveL	MoveL.cpp	/^int fst_controller::TrajPlan::MoveL(fst_controller::Pose &pose_start, double &v0, double &vu0,$/;"	f	class:fst_controller::TrajPlan
MoveL	lib_controller.cpp	/^bool fst_controller::ArmGroup::MoveL(	const Pose &pose_target, double v_max, double a_max, int cnt_target,$/;"	f	class:fst_controller::ArmGroup
MoveL	lib_controller.cpp	/^bool fst_controller::ArmGroup::MoveL(	const PoseEuler &pose_target, double v_max, double a_max, int cnt_target,$/;"	f	class:fst_controller::ArmGroup
MoveL	lib_controller.cpp	/^bool fst_controller::ArmGroup::MoveL( const Pose &pose_target, double v_max, double a_max, $/;"	f	class:fst_controller::ArmGroup
MoveL	lib_controller.cpp	/^bool fst_controller::ArmGroup::MoveL( const PoseEuler &pose_target, double v_max, double a_max, $/;"	f	class:fst_controller::ArmGroup
MoveL2J	MoveL.cpp	/^int fst_controller::TrajPlan::MoveL2J(const Pose &P0, double v0, double vu0,$/;"	f	class:fst_controller::TrajPlan
MoveL2J	lib_controller.cpp	/^bool fst_controller::ArmGroup::MoveL2J( const Pose &pose_start, double v_start, double vu_start,$/;"	f	class:fst_controller::ArmGroup
MoveL2L	lib_controller.cpp	/^bool fst_controller::ArmGroup::MoveL2L(	Pose &pose_start, double &v_start, double &vu_start,$/;"	f	class:fst_controller::ArmGroup
MultiQ	QuaternFunctions.cpp	/^int fst_controller::TrajPlan::MultiQ(double u[4], double v[4], double w[4])$/;"	f	class:fst_controller::TrajPlan
N	MatTrans.cpp	114;"	d	file:
POSE2MATRIX	QuaternFunctions.cpp	/^int fst_controller::TrajPlan::POSE2MATRIX(double PST1[3], double ORT1[4], double Pose_M[4][4])$/;"	f	class:fst_controller::TrajPlan
Polyn2	MoveL.cpp	/^int fst_controller::TrajPlan::Polyn2(double d, double v0, double v_obj, double *v_cnt1, double a, double T[4], double P[3][3])$/;"	f	class:fst_controller::TrajPlan
Polyn2_joint	MoveJ.cpp	/^double  fst_controller::TrajPlan::Polyn2_joint(double d, double v0, double v_obj, double v1, double a)$/;"	f	class:fst_controller::TrajPlan
Polyn2_joint_t	MoveJ.cpp	/^int fst_controller::TrajPlan::Polyn2_joint_t(double d, double v0, double v1, double t, double a, double T[4], double P[3][4])$/;"	f	class:fst_controller::TrajPlan
Polyn3_Q	QuaternFunctions.cpp	/^int fst_controller::TrajPlan::Polyn3_Q(double t, double v[2], double A[4])$/;"	f	class:fst_controller::TrajPlan
Quaternprv	QuaternFunctions.cpp	/^int fst_controller::TrajPlan::Quaternprv(double Q1[4], double Q2[4], double Q_prv[4])$/;"	f	class:fst_controller::TrajPlan
REVISE_JOINT	Kinematics.cpp	/^double fst_controller::TrajPlan::REVISE_JOINT(double t)$/;"	f	class:fst_controller::TrajPlan
RotX	MatTrans.cpp	/^int  fst_controller::TrajPlan::RotX(double t, double M[4][4])$/;"	f	class:fst_controller::TrajPlan
RotY	MatTrans.cpp	/^int  fst_controller::TrajPlan::RotY(double t, double M[4][4])$/;"	f	class:fst_controller::TrajPlan
RotZ	MatTrans.cpp	/^int  fst_controller::TrajPlan::RotZ(double t, double M[4][4])$/;"	f	class:fst_controller::TrajPlan
Si	QuaternFunctions.cpp	/^int fst_controller::TrajPlan::Si(double qiq[4], double qi[4], double qih[4], double si[4])$/;"	f	class:fst_controller::TrajPlan
Sign	BasicFunctions.cpp	/^int fst_controller::TrajPlan::Sign(double b)$/;"	f	class:fst_controller::TrajPlan
Slerp	QuaternFunctions.cpp	/^int fst_controller::TrajPlan::Slerp(double q0[4], double q1[4], double  h, double qh[4])$/;"	f	class:fst_controller::TrajPlan
Smt_arc	MoveL.cpp	/^int fst_controller::TrajPlan::Smt_arc(double P0[3], double P1[3], double P2[3], double r, double B1[3], double B2[3], double O[3], double *angle, double T[4][4])$/;"	f	class:fst_controller::TrajPlan
Squad	QuaternFunctions.cpp	/^int fst_controller::TrajPlan::Squad(double q1[4], double q2[4], double s1[4], double s2[4], double u, double qu[4])$/;"	f	class:fst_controller::TrajPlan
Test	demo1.cpp	/^struct Test {$/;"	s	file:
Test	demo2.cpp	/^struct Test {$/;"	s	file:
Test	demo4.cpp	/^struct Test {$/;"	s	file:
Test	demo5.cpp	/^struct Test {$/;"	s	file:
TrajPlan	Kinematics.cpp	/^fst_controller::TrajPlan::TrajPlan()$/;"	f	class:fst_controller::TrajPlan
Trans	MatTrans.cpp	/^int  fst_controller::TrajPlan::Trans(double x, double y, double z, double M[4][4])$/;"	f	class:fst_controller::TrajPlan
a	demo1.cpp	/^    int a;$/;"	m	struct:Test	file:
a	demo2.cpp	/^    int a;$/;"	m	struct:Test	file:
a	demo4.cpp	/^    int a;$/;"	m	struct:Test	file:
a	demo5.cpp	/^    int a;$/;"	m	struct:Test	file:
add3	BasicFunctions.cpp	/^int fst_controller::TrajPlan::add3(double u[3], double v[3], double w[3])$/;"	f	class:fst_controller::TrajPlan
add4	QuaternFunctions.cpp	/^int fst_controller::TrajPlan::add4(double u[4], double v[4], double w[4])$/;"	f	class:fst_controller::TrajPlan
b	demo1.cpp	/^    int b;$/;"	m	struct:Test	file:
b	demo2.cpp	/^    int b;$/;"	m	struct:Test	file:
b	demo4.cpp	/^    int b;$/;"	m	struct:Test	file:
b	demo5.cpp	/^    int b;$/;"	m	struct:Test	file:
c	demo1.cpp	/^    string c;$/;"	m	struct:Test	file:
c	demo2.cpp	/^    string c;$/;"	m	struct:Test	file:
c	demo4.cpp	/^    string c;$/;"	m	struct:Test	file:
c	demo5.cpp	/^    string c;$/;"	m	struct:Test	file:
checkJointBoundary	lib_controller.cpp	/^bool fst_controller::ArmGroup::checkJointBoundary(const JointValues &joint_values)$/;"	f	class:fst_controller::ArmGroup
clearJointTrajectoryFIFO	lib_controller.cpp	/^bool fst_controller::ArmGroup::clearJointTrajectoryFIFO(ErrorCode &err)$/;"	f	class:fst_controller::ArmGroup
clearPlannedPathFIFO	lib_controller.cpp	/^bool fst_controller::ArmGroup::clearPlannedPathFIFO(ErrorCode &err)$/;"	f	class:fst_controller::ArmGroup
computeFK	lib_controller.cpp	/^bool fst_controller::ArmGroup::computeFK(   const JointValues &joint,$/;"	f	class:fst_controller::ArmGroup
computeForwardKinematics	lib_controller.cpp	/^bool fst_controller::ArmGroup::computeForwardKinematics($/;"	f	class:fst_controller::ArmGroup
computeIK	lib_controller.cpp	/^bool fst_controller::ArmGroup::computeIK(   const Pose &pose,$/;"	f	class:fst_controller::ArmGroup
computeInverseKinematics	lib_controller.cpp	/^bool fst_controller::ArmGroup::computeInverseKinematics(   $/;"	f	class:fst_controller::ArmGroup
convertPathToTrajectory	lib_controller.cpp	/^int fst_controller::ArmGroup::convertPathToTrajectory(int num, ErrorCode &error_code)$/;"	f	class:fst_controller::ArmGroup
displayTrajectory	demo.cpp	/^void displayTrajectory(const std::vector<fst_controller::JointPoint> &traj, ros::Publisher &publisher)$/;"	f
displayTrajectory	demo1.cpp	/^void displayTrajectory(const std::vector<fst_controller::JointPoint> &traj, ros::Publisher &publisher)$/;"	f
displayTrajectory	demo2.cpp	/^void displayTrajectory(const std::vector<fst_controller::JointPoint> &traj, ros::Publisher &publisher)$/;"	f
displayTrajectory	demo3.cpp	/^void displayTrajectory(const std::vector<fst_controller::JointPoint> &traj, ros::Publisher &publisher)$/;"	f
displayTrajectory	demo4.cpp	/^void displayTrajectory(const std::vector<fst_controller::JointPoint> &traj, ros::Publisher &publisher)$/;"	f
displayTrajectory	demo5.cpp	/^void displayTrajectory(const std::vector<fst_controller::JointPoint> &traj, ros::Publisher &publisher)$/;"	f
getA	MatTrans.cpp	/^double getA(double arcs[N][N], int n)$/;"	f
getAStar	MatTrans.cpp	/^void  getAStar(double arcs[N][N], int n, double ans[N][N])$/;"	f
getAccelerationScalingFactor	lib_controller.cpp	/^double fst_controller::ArmGroup::getAccelerationScalingFactor(void)$/;"	f	class:fst_controller::ArmGroup
getCurrentJointValues	lib_controller.cpp	/^const fst_controller::JointValues& fst_controller::ArmGroup::getCurrentJointValues(void)$/;"	f	class:fst_controller::ArmGroup
getCurrentPose	lib_controller.cpp	/^const fst_controller::Pose& fst_controller::ArmGroup::getCurrentPose(void)$/;"	f	class:fst_controller::ArmGroup
getCycleTime	lib_controller.cpp	/^double fst_controller::ArmGroup::getCycleTime(void)$/;"	f	class:fst_controller::ArmGroup
getJointConstraints	lib_controller.cpp	/^const fst_controller::JointConstraints& fst_controller::ArmGroup::getJointConstraints(void)$/;"	f	class:fst_controller::ArmGroup
getJointTrajectoryFIFOIsLocked	lib_controller.cpp	/^bool fst_controller::ArmGroup::getJointTrajectoryFIFOIsLocked(void)$/;"	f	class:fst_controller::ArmGroup
getJointTrajectoryFIFOLength	lib_controller.cpp	/^int fst_controller::ArmGroup::getJointTrajectoryFIFOLength(void)$/;"	f	class:fst_controller::ArmGroup
getLatestIKReference	lib_controller.cpp	/^const fst_controller::JointValues& fst_controller::ArmGroup::getLatestIKReference(void)$/;"	f	class:fst_controller::ArmGroup
getMaxAcceleration	lib_controller.cpp	/^double fst_controller::ArmGroup::getMaxAcceleration(void)$/;"	f	class:fst_controller::ArmGroup
getMaxVelocity	lib_controller.cpp	/^double fst_controller::ArmGroup::getMaxVelocity(void)$/;"	f	class:fst_controller::ArmGroup
getPlannedPathFIFOLength	lib_controller.cpp	/^int fst_controller::ArmGroup::getPlannedPathFIFOLength(void)$/;"	f	class:fst_controller::ArmGroup
getPointsFromJointTrajectoryFIFO	lib_controller.cpp	/^int fst_controller::ArmGroup::getPointsFromJointTrajectoryFIFO(	std::vector<JointPoint> &traj,$/;"	f	class:fst_controller::ArmGroup
getVelocityScalingFactor	lib_controller.cpp	/^double fst_controller::ArmGroup::getVelocityScalingFactor(void)$/;"	f	class:fst_controller::ArmGroup
inst1	demo1.cpp	/^Test inst1,inst2;$/;"	v
inst1	demo2.cpp	/^Test inst1,inst2;$/;"	v
inst1	demo4.cpp	/^Test inst1,inst2;$/;"	v
inst1	demo5.cpp	/^Test inst1,inst2;$/;"	v
inst2	demo1.cpp	/^Test inst1,inst2;$/;"	v
inst2	demo2.cpp	/^Test inst1,inst2;$/;"	v
inst2	demo4.cpp	/^Test inst1,inst2;$/;"	v
inst2	demo5.cpp	/^Test inst1,inst2;$/;"	v
loadJointConstraints	lib_controller.cpp	/^bool fst_controller::ArmGroup::loadJointConstraints(void)$/;"	f	class:fst_controller::ArmGroup
main	demo.cpp	/^int main(int argc, char **argv)$/;"	f
main	demo1.cpp	/^int main(int argc, char **argv)$/;"	f
main	demo2.cpp	/^int main(int argc, char **argv)$/;"	f
main	demo3.cpp	/^int main(int argc, char **argv)$/;"	f
main	demo4.cpp	/^int main(int argc, char **argv)$/;"	f
main	demo5.cpp	/^int main(int argc, char **argv)$/;"	f
nV3	BasicFunctions.cpp	/^int fst_controller::TrajPlan::nV3(double n, double V[3], double nV[3])$/;"	f	class:fst_controller::TrajPlan
nV4	QuaternFunctions.cpp	/^int fst_controller::TrajPlan::nV4(double n, double V[4], double nV[4])$/;"	f	class:fst_controller::TrajPlan
norm	BasicFunctions.cpp	/^double fst_controller::TrajPlan::norm(double Vector[3])$/;"	f	class:fst_controller::TrajPlan
print3	BasicFunctions.cpp	/^int fst_controller::TrajPlan::print3(double V[3])$/;"	f	class:fst_controller::TrajPlan
print4	BasicFunctions.cpp	/^int fst_controller::TrajPlan::print4(double V[4])$/;"	f	class:fst_controller::TrajPlan
print6	BasicFunctions.cpp	/^int fst_controller::TrajPlan::print6(double V[6])$/;"	f	class:fst_controller::TrajPlan
printJointConstraints	lib_controller.cpp	/^inline void fst_controller::ArmGroup::printJointConstraints(const JointConstraints &constraints)$/;"	f	class:fst_controller::ArmGroup
printJointLimit	lib_controller.cpp	/^inline void fst_controller::ArmGroup::printJointLimit(const JointLimit &joint_limit)$/;"	f	class:fst_controller::ArmGroup
printJointPoint	lib_controller.cpp	/^inline void fst_controller::ArmGroup::printJointPoint(const JointPoint &point)$/;"	f	class:fst_controller::ArmGroup
printJointValues	lib_controller.cpp	/^inline void fst_controller::ArmGroup::printJointValues(const JointValues &joint)$/;"	f	class:fst_controller::ArmGroup
printPathPoint	lib_controller.cpp	/^inline void fst_controller::ArmGroup::printPathPoint(const PathPoint &point)$/;"	f	class:fst_controller::ArmGroup
printPose	lib_controller.cpp	/^inline void fst_controller::ArmGroup::printPose(const Pose &pose)$/;"	f	class:fst_controller::ArmGroup
printPoseEuler	lib_controller.cpp	/^inline void fst_controller::ArmGroup::printPoseEuler(const PoseEuler &pose_euler)$/;"	f	class:fst_controller::ArmGroup
resumeArmMotion	lib_controller.cpp	/^bool fst_controller::ArmGroup::resumeArmMotion(void)$/;"	f	class:fst_controller::ArmGroup
setAcceleration	MoveL.cpp	/^void fst_controller::TrajPlan::setAcceleration(double _acc)$/;"	f	class:fst_controller::TrajPlan
setAccelerationScalingFactor	lib_controller.cpp	/^bool fst_controller::ArmGroup::setAccelerationScalingFactor(double a_factor)$/;"	f	class:fst_controller::ArmGroup
setAxisLimit	Kinematics.cpp	/^void fst_controller::TrajPlan::setAxisLimit(const fst_controller::JointConstraints &limit)$/;"	f	class:fst_controller::TrajPlan
setCurrentJointValues	lib_controller.cpp	/^bool fst_controller::ArmGroup::setCurrentJointValues(const JointValues &current_joint, ErrorCode &error_code)$/;"	f	class:fst_controller::ArmGroup
setCycleTime	MoveL.cpp	/^void fst_controller::TrajPlan::setCycleTime(double _tc)$/;"	f	class:fst_controller::TrajPlan
setCycleTime	lib_controller.cpp	/^bool fst_controller::ArmGroup::setCycleTime(double tc)$/;"	f	class:fst_controller::ArmGroup
setCycleTime	lib_controller.cpp	/^void fst_controller::ArmGroup::setCycleTime(void)$/;"	f	class:fst_controller::ArmGroup
setDH	Kinematics.cpp	/^void fst_controller::TrajPlan::setDH(double _alp0, double _a0, double _d1, double _os1, double _alp1, double _a1, double _d2, double _os2, double _alp2, double _a2, double _d3, double _os3, double _alp3, double _a3, double _d4, double _os4, double _alp4, double _a4, double _d5, double _os5, double _alp5, double _a5, double _d6, double _os6)$/;"	f	class:fst_controller::TrajPlan
setJointConstraints	lib_controller.cpp	/^bool fst_controller::ArmGroup::setJointConstraints(const JointConstraints constraints)$/;"	f	class:fst_controller::ArmGroup
setJointConstraints	lib_controller.cpp	/^void fst_controller::ArmGroup::setJointConstraints(void)$/;"	f	class:fst_controller::ArmGroup
setJumpThresholdScalingFactor	lib_controller.cpp	/^bool fst_controller::ArmGroup::setJumpThresholdScalingFactor(double j_factor)$/;"	f	class:fst_controller::ArmGroup
setJumpThresholdScalingFactor	lib_controller.cpp	/^void fst_controller::ArmGroup::setJumpThresholdScalingFactor(void)$/;"	f	class:fst_controller::ArmGroup
setLatestIKReference	lib_controller.cpp	/^bool fst_controller::ArmGroup::setLatestIKReference(const JointValues &joint_reference, ErrorCode &error_code)$/;"	f	class:fst_controller::ArmGroup
setLimitScale	Kinematics.cpp	/^void fst_controller::TrajPlan::setLimitScale(double _limit_scale)$/;"	f	class:fst_controller::TrajPlan
setMaxAcceleration	lib_controller.cpp	/^bool fst_controller::ArmGroup::setMaxAcceleration(double max_a)$/;"	f	class:fst_controller::ArmGroup
setMaxAcceleration	lib_controller.cpp	/^void fst_controller::ArmGroup::setMaxAcceleration(void)$/;"	f	class:fst_controller::ArmGroup
setMaxVelocity	lib_controller.cpp	/^bool fst_controller::ArmGroup::setMaxVelocity(double max_v)$/;"	f	class:fst_controller::ArmGroup
setOvershoot	Kinematics.cpp	/^void fst_controller::TrajPlan::setOvershoot(double _overshoot)$/;"	f	class:fst_controller::TrajPlan
setStartState	lib_controller.cpp	/^bool fst_controller::ArmGroup::setStartState(const JointValues &joint_start, ErrorCode &error_code)$/;"	f	class:fst_controller::ArmGroup
setToolFrame	Kinematics.cpp	/^void fst_controller::TrajPlan::setToolFrame(const fst_controller::Point &position, const fst_controller::Euler &orientation)$/;"	f	class:fst_controller::TrajPlan
setToolFrame	lib_controller.cpp	/^void fst_controller::ArmGroup::setToolFrame(const Transformation &tool_frame)$/;"	f	class:fst_controller::ArmGroup
setUserFrame	Kinematics.cpp	/^void fst_controller::TrajPlan::setUserFrame(const fst_controller::Point &position, const fst_controller::Euler &orientation)$/;"	f	class:fst_controller::TrajPlan
setUserFrame	lib_controller.cpp	/^void fst_controller::ArmGroup::setUserFrame(const Transformation &user_frame)$/;"	f	class:fst_controller::ArmGroup
setVelocityScalingFactor	lib_controller.cpp	/^bool fst_controller::ArmGroup::setVelocityScalingFactor(double v_factor)$/;"	f	class:fst_controller::ArmGroup
seterrorangle	Kinematics.cpp	/^void fst_controller::TrajPlan::seterrorangle(double _errorangle)$/;"	f	class:fst_controller::TrajPlan
setoverload	Kinematics.cpp	/^void fst_controller::TrajPlan::setoverload(double _accelerationoverload)$/;"	f	class:fst_controller::TrajPlan
suspendArmMotion	lib_controller.cpp	/^bool fst_controller::ArmGroup::suspendArmMotion(void)$/;"	f	class:fst_controller::ArmGroup
transformPose2PoseEuler	lib_controller.cpp	/^fst_controller::PoseEuler fst_controller::ArmGroup::transformPose2PoseEuler(const Pose &pose)$/;"	f	class:fst_controller::ArmGroup
transformPoseEuler2Pose	lib_controller.cpp	/^fst_controller::Pose fst_controller::ArmGroup::transformPoseEuler2Pose(const PoseEuler &pose_e)$/;"	f	class:fst_controller::ArmGroup
~ArmGroup	lib_controller.cpp	/^fst_controller::ArmGroup::~ArmGroup(void)$/;"	f	class:fst_controller::ArmGroup
