/**********************************************
Copyright Â© 2016 Foresight-Robotics Ltd. All rights reserved.
File:       io_manager.h
Author:     Feng.Wu 
Create:     14-Feb-2017
Modify:     08-Jun-2017
Summary:    dealing with IO module
**********************************************/

#ifndef IO_MANAGER_IO_MANAGER_H_
#define IO_MANAGER_IO_MANAGER_H_

#include <vector>
#include <string>
#include <map>
#include <boost/thread/thread.hpp>
#include <boost/thread/mutex.hpp>
#include <parameter_manager/parameter_manager_param_group.h>
#include "base_datatype.h"
#include "error_code.h"
#include "IOboard.h"

#define IO_INPUT 1
#define IO_OUTPUT 2
#define IO_AI 1
#define IO_AO 2
#define IO_DATAFRAME_MAX 5

namespace fst_io_manager
{
typedef unsigned long long int U64;

typedef union PhysicsID
{
    uint32_t number;
    struct{
        char port:8;
        char port_type:8;
        char address:8;
        char dev_type:8;
    }info;
}PhysicsID;

// This is output info.
struct IODeviceInfo
{
    unsigned int id;//address
//d    DeviceType device_type;
    unsigned int input_num;
    unsigned int output_num;
};
/*
// This is the data to driver.
struct IODeviceData
{
    uint8_t id;
    uint8_t enable;
    uint8_t verify;
    uint8_t model;
    unsigned char input[IO_DATAFRAME_MAX]; 
    unsigned char output[IO_DATAFRAME_MAX];
};
*/
// Local table
struct IOTable
{
    IODeviceData data;
    IODeviceInfo info;
    unsigned char output[IO_DATAFRAME_MAX]; // store the output request from tp.
};

enum ThreadStatus
{
    INIT_STATUS = 1,
    RUNNING_STATUS = 2,
};

enum ThreadError
{
    THREAD_SUCCESS = 0,
    THREAD_LOAD_IO_CONFIG_FAIL = 1,
    THREAD_GET_IO_FAIL = 2,
    THREAD_IO_DEVICE_CHANGED = 3,
};

class IOManager
{
public:
    //------------------------------------------------------------
    // Function:  IOManager
    // Summary: The constructor of class
    // In:      None
    // Out:     None
    // Return:  None 
    //------------------------------------------------------------
    IOManager();

    //------------------------------------------------------------
    // Function:  ~IOManager
    // Summary: The destructor of class
    // In:      None
    // Out:     None
    // Return:  None 
    //------------------------------------------------------------
    ~IOManager();

    //------------------------------------------------------------
    // Function:    init
    // Summary: Initialize
    // In:      None
    // Out:     None
    // Return:  0 -> success.
    //          ERROR_CODE -> failed.
    //------------------------------------------------------------
    ErrorCode init(int fake = 0);

    //------------------------------------------------------------
    // Function:    refreshDevicesNum
    // Summary: refresh, and get the number of devices
    // In:      None
    // Out:     None
    // Return:  int -> the total number of io devices.
    //------------------------------------------------------------
    int refreshDevicesNum(void);

    //------------------------------------------------------------
    // Function:    getDevicesNum
    // Summary: get the number of devices
    // In:      None
    // Out:     None
    // Return:  int -> the total number of io devices.
    //------------------------------------------------------------
    int getDevicesNum(void);//depressed soon.

    //------------------------------------------------------------
    // Function:    getDeviceInfo
    // Summary: get the information of each device.
    // In:      index -> the sequence number of the device.
    // Out:     info  -> the information of each device.
    // Return:  ErrorCode   -> error codes.
    //------------------------------------------------------------
    ErrorCode getDeviceInfo(unsigned int index, IODeviceInfo &info);

    //------------------------------------------------------------
    // Function:    getModuleValue
    // Summary: get the status value of one port on one device.
    // In:      id         -> the parameter id according to the parameter path.
    //          port_type  -> IO_INPUT or IO_output.
    //          port_seq   -> the sequence number of the ports.
    // Out:     port_value -> the port status.
    // Return:  ErrorCode        -> error codes.
    //------------------------------------------------------------
    ErrorCode getModuleValue(uint32_t physics_id, uint8_t &port_value);
    
    //------------------------------------------------------------
    // Function:    getModuleValues
    // Summary: get the status values of all ports on one device
    // In:      id  -> the parameter id according to the parameter path.
    //          len -> the size of the memory to store port values.
    // Out:     ptr -> the address of the memoryto store port values.
    //          num -> the total number of the ports.
    // Return:  ErrorCode -> error codes.
    //------------------------------------------------------------
    ErrorCode getModuleValues(uint32_t physics_id, int len, unsigned char *ptr, int &num);

    //------------------------------------------------------------
    // Function:    setModuleValue
    // Summary: set the status value of one port on one device.
    // In:      id         -> the parameter id according to the parameter path.
    //          port_seq   -> the sequence number of the port.
    //          port_value -> the status value of the port.
    // Out:     None.
    // Return:  ErrorCode        -> error codes.
    //------------------------------------------------------------
    ErrorCode setModuleValue(uint32_t physics_id, uint8_t port_value);
    
    //------------------------------------------------------------
    // Function:    getThreadError
    // Summary: get the error status of the io thread.
    // In:      None.
    // Out:     None.
    // Return:  ErrorCode -> error codes.
    //------------------------------------------------------------
    ErrorCode getIOError(void);

    // the total number of device on RS485.
    static const int RS_DEV_NUM = 4;

    // the faulty tolerance times.
    static const int FAULT_TOL = 20;

    // the thread cycle.
    static const int LOOP_CYCLE = 1000;


private:

    // the flags to read and write FPGA.
    uint8_t seq_;

    // the counter for the error times of reading FPGA.
    int read_counter_;

    // the counter for the error times of writing FPGA.
    int write_counter_;

    // to record the last error when thread runs.
    ThreadError last_error_;

    // to indicate the thread has error once. Lock it when used.
    ThreadError thread_error_;

    // the status of the io thread.
    ThreadStatus thread_status_;

    // The buffer to store all the reading io data. Lock it when used.
    std::vector<IOTable> io_r_;

    // mutex lock
    boost::mutex mutex_;

    // the map to store the error codes.
    std::map<int, U64> error_map_;

    // the object to operate on the configuration file.
    fst_parameter::ParamGroup param_;

    // the thread object.
    boost::thread io_thread;
    
    //------------------------------------------------------------
    // Function:    searchParamId
    // Summary: find the index of table according to the parameter id.
    // In:      id  -> the parameter id according to the parameter path.
    //          io  -> the table to store all the io data.
    // Out:     None.
    // Return:  int -> the index of the table.
    //          -1  -> can't find.
    //------------------------------------------------------------
    int searchParamId(unsigned int id, std::vector<IOTable> &io);

    //------------------------------------------------------------
    // Function:    startThread
    // Summary: start a thread.
    // In:      None.
    // Out:     None.
    // Return:  None.
    //------------------------------------------------------------
    void startThread(void);

    //------------------------------------------------------------
    // Function:    runThread
    // Summary: main function of io thread.
    // In:      None.
    // Out:     None.
    // Return:  None.
    //------------------------------------------------------------
    void runThread(void);

    //------------------------------------------------------------
    // Function:    initDeviceData
    // Summary: read io and load configuration file when the thread is starting up.
    // In:      None.
    // Out:     None.
    // Return:  None.
    //------------------------------------------------------------
    void initDevicesData(void);

    //------------------------------------------------------------
    // Function:    updateDeviceData
    // Summary: refreshen the io data.
    // In:      None.
    // Out:     None.
    // Return:  ErrorCode -> error codes.
    //------------------------------------------------------------
    ErrorCode updateDevicesData(void);

    //------------------------------------------------------------
    // Function:    setThreadError
    // Summary: set the thread_error_.
    // In:      None.
    // Out:     None.
    // Return:  None.
    //------------------------------------------------------------
    void setThreadError(void);

    //------------------------------------------------------------
    // Function:    initIOTableVar
    // Summary: initialize the variable of IOTable structure.
    // In:      None.
    // Out:     io -> variable.
    // Return:  None.
    //------------------------------------------------------------
    void initIOTableVar(IOTable &io);

    //------------------------------------------------------------
    // Function:    getDeviceDataBy485
    // Summary: get io data by RS485 and check data.
    // In:      None.
    // Out:     data -> io data from RS485.
    // Return:  ErrorCode  -> error codes.
    //------------------------------------------------------------
    ErrorCode getDeviceDataBy485(IODeviceData &data);

    //------------------------------------------------------------
    // Function:    readWriteBy485Driver
    // Summary: interact with FPGA to get data.
    // In:      None.
    // Out:     data  -> io data from RS485.
    // Return:  true  -> get data successfully.
    //          false -> get data failed.
    //------------------------------------------------------------
    bool readWriteBy485Driver(IODeviceData &data);

/*    // simulate driver function
    int ioSetIdSeq(uint8_t idseq);
    int ioGetSeq(uint8_t *seq);
    int ioWriteDownload(struct IODeviceData *idd);
    int ioReadUpload(struct IODeviceData *idd);
*/

};
} //namespace fst_io_manager

#endif //IO_MANAGER_IO_MANAGER_H_
