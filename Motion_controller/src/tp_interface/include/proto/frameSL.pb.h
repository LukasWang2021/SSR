/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.7-dev at Mon May 28 15:43:42 2018. */

#ifndef PB_FRAME_SPEC_FRAMESL_PB_H_INCLUDED
#define PB_FRAME_SPEC_FRAMESL_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _frame_spec_Set {
    frame_spec_Set_DEFAULT = 100,
    frame_spec_Set_ADD = 101,
    frame_spec_Set_DELETE = 102,
    frame_spec_Set_UPDATE = 103
} frame_spec_Set;
#define _frame_spec_Set_MIN frame_spec_Set_DEFAULT
#define _frame_spec_Set_MAX frame_spec_Set_UPDATE
#define _frame_spec_Set_ARRAYSIZE ((frame_spec_Set)(frame_spec_Set_UPDATE+1))

/* Struct definitions */
typedef struct _frame_spec_ActivateInterface {
    bool has_id;
    int32_t id;
/* @@protoc_insertion_point(struct:frame_spec_ActivateInterface) */
} frame_spec_ActivateInterface;

typedef struct _frame_spec_Euler {
    double a;
    double b;
    double c;
/* @@protoc_insertion_point(struct:frame_spec_Euler) */
} frame_spec_Euler;

typedef struct _frame_spec_Pose {
    double x;
    double y;
    double z;
/* @@protoc_insertion_point(struct:frame_spec_Pose) */
} frame_spec_Pose;

typedef struct _frame_spec_SimpleFrame {
    bool has_id;
    int32_t id;
    bool has_comment;
    char comment[32];
/* @@protoc_insertion_point(struct:frame_spec_SimpleFrame) */
} frame_spec_SimpleFrame;

typedef struct _frame_spec_PoseEuler {
    frame_spec_Pose position;
    frame_spec_Euler orientation;
/* @@protoc_insertion_point(struct:frame_spec_PoseEuler) */
} frame_spec_PoseEuler;

typedef struct _frame_spec_SimpleFrameInterface {
    bool has_total_frame;
    int32_t total_frame;
    pb_size_t frame_count;
    frame_spec_SimpleFrame frame[11];
/* @@protoc_insertion_point(struct:frame_spec_SimpleFrameInterface) */
} frame_spec_SimpleFrameInterface;

typedef struct _frame_spec_Frame {
    int32_t id;
    bool has_is_valid;
    bool is_valid;
    bool has_comment;
    char comment[32];
    bool has_data;
    frame_spec_PoseEuler data;
/* @@protoc_insertion_point(struct:frame_spec_Frame) */
} frame_spec_Frame;

typedef struct _frame_spec_Interface {
    frame_spec_Frame frame;
    bool has_operation;
    frame_spec_Set operation;
/* @@protoc_insertion_point(struct:frame_spec_Interface) */
} frame_spec_Interface;

/* Default values for struct fields */

/* Initializer values for message structs */
#define frame_spec_Pose_init_default             {0, 0, 0}
#define frame_spec_Euler_init_default            {0, 0, 0}
#define frame_spec_PoseEuler_init_default        {frame_spec_Pose_init_default, frame_spec_Euler_init_default}
#define frame_spec_Frame_init_default            {0, false, 0, false, "", false, frame_spec_PoseEuler_init_default}
#define frame_spec_Interface_init_default        {frame_spec_Frame_init_default, false, (frame_spec_Set)0}
#define frame_spec_ActivateInterface_init_default {false, 0}
#define frame_spec_SimpleFrame_init_default      {false, 0, false, ""}
#define frame_spec_SimpleFrameInterface_init_default {false, 0, 0, {frame_spec_SimpleFrame_init_default, frame_spec_SimpleFrame_init_default, frame_spec_SimpleFrame_init_default, frame_spec_SimpleFrame_init_default, frame_spec_SimpleFrame_init_default, frame_spec_SimpleFrame_init_default, frame_spec_SimpleFrame_init_default, frame_spec_SimpleFrame_init_default, frame_spec_SimpleFrame_init_default, frame_spec_SimpleFrame_init_default, frame_spec_SimpleFrame_init_default}}
#define frame_spec_Pose_init_zero                {0, 0, 0}
#define frame_spec_Euler_init_zero               {0, 0, 0}
#define frame_spec_PoseEuler_init_zero           {frame_spec_Pose_init_zero, frame_spec_Euler_init_zero}
#define frame_spec_Frame_init_zero               {0, false, 0, false, "", false, frame_spec_PoseEuler_init_zero}
#define frame_spec_Interface_init_zero           {frame_spec_Frame_init_zero, false, (frame_spec_Set)0}
#define frame_spec_ActivateInterface_init_zero   {false, 0}
#define frame_spec_SimpleFrame_init_zero         {false, 0, false, ""}
#define frame_spec_SimpleFrameInterface_init_zero {false, 0, 0, {frame_spec_SimpleFrame_init_zero, frame_spec_SimpleFrame_init_zero, frame_spec_SimpleFrame_init_zero, frame_spec_SimpleFrame_init_zero, frame_spec_SimpleFrame_init_zero, frame_spec_SimpleFrame_init_zero, frame_spec_SimpleFrame_init_zero, frame_spec_SimpleFrame_init_zero, frame_spec_SimpleFrame_init_zero, frame_spec_SimpleFrame_init_zero, frame_spec_SimpleFrame_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define frame_spec_ActivateInterface_id_tag      1
#define frame_spec_Euler_a_tag                   1
#define frame_spec_Euler_b_tag                   2
#define frame_spec_Euler_c_tag                   3
#define frame_spec_Pose_x_tag                    1
#define frame_spec_Pose_y_tag                    2
#define frame_spec_Pose_z_tag                    3
#define frame_spec_SimpleFrame_id_tag            1
#define frame_spec_SimpleFrame_comment_tag       2
#define frame_spec_PoseEuler_position_tag        1
#define frame_spec_PoseEuler_orientation_tag     2
#define frame_spec_SimpleFrameInterface_total_frame_tag 1
#define frame_spec_SimpleFrameInterface_frame_tag 2
#define frame_spec_Frame_id_tag                  1
#define frame_spec_Frame_is_valid_tag            2
#define frame_spec_Frame_comment_tag             3
#define frame_spec_Frame_data_tag                4
#define frame_spec_Interface_frame_tag           1
#define frame_spec_Interface_operation_tag       2

/* Struct field encoding specification for nanopb */
extern const pb_field_t frame_spec_Pose_fields[4];
extern const pb_field_t frame_spec_Euler_fields[4];
extern const pb_field_t frame_spec_PoseEuler_fields[3];
extern const pb_field_t frame_spec_Frame_fields[5];
extern const pb_field_t frame_spec_Interface_fields[3];
extern const pb_field_t frame_spec_ActivateInterface_fields[2];
extern const pb_field_t frame_spec_SimpleFrame_fields[3];
extern const pb_field_t frame_spec_SimpleFrameInterface_fields[3];

/* Maximum encoded size of messages (where known) */
#define frame_spec_Pose_size                     27
#define frame_spec_Euler_size                    27
#define frame_spec_PoseEuler_size                58
#define frame_spec_Frame_size                    107
#define frame_spec_Interface_size                111
#define frame_spec_ActivateInterface_size        11
#define frame_spec_SimpleFrame_size              45
#define frame_spec_SimpleFrameInterface_size     528

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define FRAMESL_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
