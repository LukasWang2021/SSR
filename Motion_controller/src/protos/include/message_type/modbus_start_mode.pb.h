/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.7-dev at Fri Dec  7 10:47:08 2018. */

#ifndef PB_MESSAGETYPE_MODBUS_START_MODE_PB_H_INCLUDED
#define PB_MESSAGETYPE_MODBUS_START_MODE_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _MessageType_ModbusStartModeType {
    MessageType_ModbusStartModeType_CLIENT = 1,
    MessageType_ModbusStartModeType_SERVER = 2
} MessageType_ModbusStartModeType;
#define _MessageType_ModbusStartModeType_MIN MessageType_ModbusStartModeType_CLIENT
#define _MessageType_ModbusStartModeType_MAX MessageType_ModbusStartModeType_SERVER
#define _MessageType_ModbusStartModeType_ARRAYSIZE ((MessageType_ModbusStartModeType)(MessageType_ModbusStartModeType_SERVER+1))

/* Struct definitions */
typedef struct _MessageType_ModbusStartMode {
    MessageType_ModbusStartModeType start_mode;
/* @@protoc_insertion_point(struct:MessageType_ModbusStartMode) */
} MessageType_ModbusStartMode;

/* Default values for struct fields */

/* Initializer values for message structs */
#define MessageType_ModbusStartMode_init_default {(MessageType_ModbusStartModeType)0}
#define MessageType_ModbusStartMode_init_zero    {(MessageType_ModbusStartModeType)0}

/* Field tags (for use in manual encoding/decoding) */
#define MessageType_ModbusStartMode_start_mode_tag 1

/* Struct field encoding specification for nanopb */
extern const pb_field_t MessageType_ModbusStartMode_fields[2];

/* Maximum encoded size of messages (where known) */
#define MessageType_ModbusStartMode_size         2

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define MODBUS_START_MODE_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
