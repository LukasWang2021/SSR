/* Automatically generated nanopb constant definitions */
/* Generated by nanopb-0.3.7-dev at Tue May 22 14:33:48 2018. */

#include "registerSL.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif



const pb_field_t register_spec_Point_fields[4] = {
    PB_FIELD(  1, DOUBLE  , REQUIRED, STATIC  , FIRST, register_spec_Point, x, x, 0),
    PB_FIELD(  2, DOUBLE  , REQUIRED, STATIC  , OTHER, register_spec_Point, y, x, 0),
    PB_FIELD(  3, DOUBLE  , REQUIRED, STATIC  , OTHER, register_spec_Point, z, y, 0),
    PB_LAST_FIELD
};

const pb_field_t register_spec_Euler_fields[4] = {
    PB_FIELD(  1, DOUBLE  , REQUIRED, STATIC  , FIRST, register_spec_Euler, a, a, 0),
    PB_FIELD(  2, DOUBLE  , REQUIRED, STATIC  , OTHER, register_spec_Euler, b, a, 0),
    PB_FIELD(  3, DOUBLE  , REQUIRED, STATIC  , OTHER, register_spec_Euler, c, b, 0),
    PB_LAST_FIELD
};

const pb_field_t register_spec_PoseEuler_fields[3] = {
    PB_FIELD(  1, MESSAGE , REQUIRED, STATIC  , FIRST, register_spec_PoseEuler, position, position, &register_spec_Point_fields),
    PB_FIELD(  2, MESSAGE , REQUIRED, STATIC  , OTHER, register_spec_PoseEuler, orientation, position, &register_spec_Euler_fields),
    PB_LAST_FIELD
};

const pb_field_t register_spec_Joint_fields[10] = {
    PB_FIELD(  1, DOUBLE  , REQUIRED, STATIC  , FIRST, register_spec_Joint, j1, j1, 0),
    PB_FIELD(  2, DOUBLE  , REQUIRED, STATIC  , OTHER, register_spec_Joint, j2, j1, 0),
    PB_FIELD(  3, DOUBLE  , REQUIRED, STATIC  , OTHER, register_spec_Joint, j3, j2, 0),
    PB_FIELD(  4, DOUBLE  , REQUIRED, STATIC  , OTHER, register_spec_Joint, j4, j3, 0),
    PB_FIELD(  5, DOUBLE  , REQUIRED, STATIC  , OTHER, register_spec_Joint, j5, j4, 0),
    PB_FIELD(  6, DOUBLE  , REQUIRED, STATIC  , OTHER, register_spec_Joint, j6, j5, 0),
    PB_FIELD(  7, DOUBLE  , REQUIRED, STATIC  , OTHER, register_spec_Joint, j7, j6, 0),
    PB_FIELD(  8, DOUBLE  , REQUIRED, STATIC  , OTHER, register_spec_Joint, j8, j7, 0),
    PB_FIELD(  9, DOUBLE  , REQUIRED, STATIC  , OTHER, register_spec_Joint, j9, j8, 0),
    PB_LAST_FIELD
};

const pb_field_t register_spec_PRInterface_fields[6] = {
    PB_FIELD(  1, MESSAGE , REQUIRED, STATIC  , FIRST, register_spec_PRInterface, pose, pose, &register_spec_PoseEuler_fields),
    PB_FIELD(  2, MESSAGE , REQUIRED, STATIC  , OTHER, register_spec_PRInterface, joint, pose, &register_spec_Joint_fields),
    PB_FIELD(  3, INT32   , REQUIRED, STATIC  , OTHER, register_spec_PRInterface, type, joint, 0),
    PB_FIELD(  4, INT32   , REQUIRED, STATIC  , OTHER, register_spec_PRInterface, id, type, 0),
    PB_FIELD(  5, STRING  , REQUIRED, STATIC  , OTHER, register_spec_PRInterface, comment, id, 0),
    PB_LAST_FIELD
};

const pb_field_t register_spec_SRInterface_fields[4] = {
    PB_FIELD(  1, STRING  , REQUIRED, STATIC  , FIRST, register_spec_SRInterface, value, value, 0),
    PB_FIELD(  2, INT32   , REQUIRED, STATIC  , OTHER, register_spec_SRInterface, id, value, 0),
    PB_FIELD(  3, STRING  , REQUIRED, STATIC  , OTHER, register_spec_SRInterface, comment, id, 0),
    PB_LAST_FIELD
};

const pb_field_t register_spec_NRInterface_fields[4] = {
    PB_FIELD(  1, DOUBLE  , REQUIRED, STATIC  , FIRST, register_spec_NRInterface, value, value, 0),
    PB_FIELD(  2, INT32   , REQUIRED, STATIC  , OTHER, register_spec_NRInterface, id, value, 0),
    PB_FIELD(  3, STRING  , REQUIRED, STATIC  , OTHER, register_spec_NRInterface, comment, id, 0),
    PB_LAST_FIELD
};

const pb_field_t register_spec_MRInterface_fields[4] = {
    PB_FIELD(  1, INT32   , REQUIRED, STATIC  , FIRST, register_spec_MRInterface, value, value, 0),
    PB_FIELD(  2, INT32   , REQUIRED, STATIC  , OTHER, register_spec_MRInterface, id, value, 0),
    PB_FIELD(  3, STRING  , REQUIRED, STATIC  , OTHER, register_spec_MRInterface, comment, id, 0),
    PB_LAST_FIELD
};


/* Check that field information fits in pb_field_t */
#if !defined(PB_FIELD_32BIT)
/* If you get an error here, it means that you need to define PB_FIELD_32BIT
 * compile-time option. You can do that in pb.h or on compiler command line.
 * 
 * The reason you need to do this is that some of your messages contain tag
 * numbers or field sizes that are larger than what can fit in 8 or 16 bit
 * field descriptors.
 */
PB_STATIC_ASSERT((pb_membersize(register_spec_PoseEuler, position) < 65536 && pb_membersize(register_spec_PoseEuler, orientation) < 65536 && pb_membersize(register_spec_PRInterface, pose) < 65536 && pb_membersize(register_spec_PRInterface, joint) < 65536), YOU_MUST_DEFINE_PB_FIELD_32BIT_FOR_MESSAGES_register_spec_Point_register_spec_Euler_register_spec_PoseEuler_register_spec_Joint_register_spec_PRInterface_register_spec_SRInterface_register_spec_NRInterface_register_spec_MRInterface)
#endif

#if !defined(PB_FIELD_16BIT) && !defined(PB_FIELD_32BIT)
/* If you get an error here, it means that you need to define PB_FIELD_16BIT
 * compile-time option. You can do that in pb.h or on compiler command line.
 * 
 * The reason you need to do this is that some of your messages contain tag
 * numbers or field sizes that are larger than what can fit in the default
 * 8 bit descriptors.
 */
PB_STATIC_ASSERT((pb_membersize(register_spec_PoseEuler, position) < 256 && pb_membersize(register_spec_PoseEuler, orientation) < 256 && pb_membersize(register_spec_PRInterface, pose) < 256 && pb_membersize(register_spec_PRInterface, joint) < 256), YOU_MUST_DEFINE_PB_FIELD_16BIT_FOR_MESSAGES_register_spec_Point_register_spec_Euler_register_spec_PoseEuler_register_spec_Joint_register_spec_PRInterface_register_spec_SRInterface_register_spec_NRInterface_register_spec_MRInterface)
#endif


/* On some platforms (such as AVR), double is really float.
 * These are not directly supported by nanopb, but see example_avr_double.
 * To get rid of this error, remove any double fields from your .proto.
 */
PB_STATIC_ASSERT(sizeof(double) == 8, DOUBLE_MUST_BE_8_BYTES)

/* @@protoc_insertion_point(eof) */
