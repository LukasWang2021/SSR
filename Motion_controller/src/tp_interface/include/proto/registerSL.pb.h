/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.7-dev at Fri Apr 27 11:00:29 2018. */

#ifndef PB_REGISTER_SPEC_REGISTERSL_PB_H_INCLUDED
#define PB_REGISTER_SPEC_REGISTERSL_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _register_spec_RegType {
    register_spec_RegType_POSE = 101,
    register_spec_RegType_STR = 201,
    register_spec_RegType_NUM = 301,
    register_spec_RegType_MOT = 401
} register_spec_RegType;
#define _register_spec_RegType_MIN register_spec_RegType_POSE
#define _register_spec_RegType_MAX register_spec_RegType_MOT
#define _register_spec_RegType_ARRAYSIZE ((register_spec_RegType)(register_spec_RegType_MOT+1))

typedef enum _register_spec_RegTotal {
    register_spec_RegTotal_POSE_TOTAL = 200,
    register_spec_RegTotal_STRING_TOTAL = 300,
    register_spec_RegTotal_NUMBER_TOTAL = 1500,
    register_spec_RegTotal_MOTION_TOTAL = 1500
} register_spec_RegTotal;
#define _register_spec_RegTotal_MIN register_spec_RegTotal_POSE_TOTAL
#define _register_spec_RegTotal_MAX register_spec_RegTotal_MOTION_TOTAL
#define _register_spec_RegTotal_ARRAYSIZE ((register_spec_RegTotal)(register_spec_RegTotal_MOTION_TOTAL+1))

/* Struct definitions */
typedef struct _register_spec_Euler {
    double a;
    double b;
    double c;
/* @@protoc_insertion_point(struct:register_spec_Euler) */
} register_spec_Euler;

typedef struct _register_spec_Joint {
    double j1;
    double j2;
    double j3;
    double j4;
    double j5;
    double j6;
    double j7;
    double j8;
    double j9;
/* @@protoc_insertion_point(struct:register_spec_Joint) */
} register_spec_Joint;

typedef struct _register_spec_MotionReg {
    int32_t value;
    int32_t id;
    char comment[32];
/* @@protoc_insertion_point(struct:register_spec_MotionReg) */
} register_spec_MotionReg;

typedef struct _register_spec_NumberReg {
    double value;
    int32_t id;
    char comment[32];
/* @@protoc_insertion_point(struct:register_spec_NumberReg) */
} register_spec_NumberReg;

typedef struct _register_spec_Point {
    double x;
    double y;
    double z;
/* @@protoc_insertion_point(struct:register_spec_Point) */
} register_spec_Point;

typedef struct _register_spec_RegMap {
    register_spec_RegType type;
    int32_t index;
    bool has_value;
    char value[512];
/* @@protoc_insertion_point(struct:register_spec_RegMap) */
} register_spec_RegMap;

typedef struct _register_spec_StringReg {
    char value[254];
    int32_t id;
    char comment[32];
/* @@protoc_insertion_point(struct:register_spec_StringReg) */
} register_spec_StringReg;

typedef struct _register_spec_PoseEuler {
    register_spec_Point position;
    register_spec_Euler orientation;
/* @@protoc_insertion_point(struct:register_spec_PoseEuler) */
} register_spec_PoseEuler;

typedef struct _register_spec_PoseReg {
    register_spec_PoseEuler pose;
    register_spec_Joint joint;
    int32_t type;
    int32_t id;
    char comment[32];
/* @@protoc_insertion_point(struct:register_spec_PoseReg) */
} register_spec_PoseReg;

/* Default values for struct fields */

/* Initializer values for message structs */
#define register_spec_Point_init_default         {0, 0, 0}
#define register_spec_Euler_init_default         {0, 0, 0}
#define register_spec_PoseEuler_init_default     {register_spec_Point_init_default, register_spec_Euler_init_default}
#define register_spec_Joint_init_default         {0, 0, 0, 0, 0, 0, 0, 0, 0}
#define register_spec_RegMap_init_default        {(register_spec_RegType)0, 0, false, ""}
#define register_spec_PoseReg_init_default       {register_spec_PoseEuler_init_default, register_spec_Joint_init_default, 0, 0, ""}
#define register_spec_StringReg_init_default     {"", 0, ""}
#define register_spec_NumberReg_init_default     {0, 0, ""}
#define register_spec_MotionReg_init_default     {0, 0, ""}
#define register_spec_Point_init_zero            {0, 0, 0}
#define register_spec_Euler_init_zero            {0, 0, 0}
#define register_spec_PoseEuler_init_zero        {register_spec_Point_init_zero, register_spec_Euler_init_zero}
#define register_spec_Joint_init_zero            {0, 0, 0, 0, 0, 0, 0, 0, 0}
#define register_spec_RegMap_init_zero           {(register_spec_RegType)0, 0, false, ""}
#define register_spec_PoseReg_init_zero          {register_spec_PoseEuler_init_zero, register_spec_Joint_init_zero, 0, 0, ""}
#define register_spec_StringReg_init_zero        {"", 0, ""}
#define register_spec_NumberReg_init_zero        {0, 0, ""}
#define register_spec_MotionReg_init_zero        {0, 0, ""}

/* Field tags (for use in manual encoding/decoding) */
#define register_spec_Euler_a_tag                1
#define register_spec_Euler_b_tag                2
#define register_spec_Euler_c_tag                3
#define register_spec_Joint_j1_tag               1
#define register_spec_Joint_j2_tag               2
#define register_spec_Joint_j3_tag               3
#define register_spec_Joint_j4_tag               4
#define register_spec_Joint_j5_tag               5
#define register_spec_Joint_j6_tag               6
#define register_spec_Joint_j7_tag               7
#define register_spec_Joint_j8_tag               8
#define register_spec_Joint_j9_tag               9
#define register_spec_MotionReg_value_tag        1
#define register_spec_MotionReg_id_tag           2
#define register_spec_MotionReg_comment_tag      3
#define register_spec_NumberReg_value_tag        1
#define register_spec_NumberReg_id_tag           2
#define register_spec_NumberReg_comment_tag      3
#define register_spec_Point_x_tag                1
#define register_spec_Point_y_tag                2
#define register_spec_Point_z_tag                3
#define register_spec_RegMap_type_tag            1
#define register_spec_RegMap_index_tag           2
#define register_spec_RegMap_value_tag           3
#define register_spec_StringReg_value_tag        1
#define register_spec_StringReg_id_tag           2
#define register_spec_StringReg_comment_tag      3
#define register_spec_PoseEuler_position_tag     1
#define register_spec_PoseEuler_orientation_tag  2
#define register_spec_PoseReg_pose_tag           1
#define register_spec_PoseReg_joint_tag          2
#define register_spec_PoseReg_type_tag           3
#define register_spec_PoseReg_id_tag             4
#define register_spec_PoseReg_comment_tag        5

/* Struct field encoding specification for nanopb */
extern const pb_field_t register_spec_Point_fields[4];
extern const pb_field_t register_spec_Euler_fields[4];
extern const pb_field_t register_spec_PoseEuler_fields[3];
extern const pb_field_t register_spec_Joint_fields[10];
extern const pb_field_t register_spec_RegMap_fields[4];
extern const pb_field_t register_spec_PoseReg_fields[6];
extern const pb_field_t register_spec_StringReg_fields[4];
extern const pb_field_t register_spec_NumberReg_fields[4];
extern const pb_field_t register_spec_MotionReg_fields[4];

/* Maximum encoded size of messages (where known) */
#define register_spec_Point_size                 27
#define register_spec_Euler_size                 27
#define register_spec_PoseEuler_size             58
#define register_spec_Joint_size                 81
#define register_spec_RegMap_size                529
#define register_spec_PoseReg_size               199
#define register_spec_StringReg_size             302
#define register_spec_NumberReg_size             54
#define register_spec_MotionReg_size             56

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define REGISTERSL_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
